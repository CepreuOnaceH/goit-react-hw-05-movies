{"version":3,"file":"static/js/642.fe4da67f.chunk.js","mappings":"8LAoDA,UAhDoB,WAClB,OAA8BA,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACMC,GAASC,EAAAA,EAAAA,MA2Bf,OAzBAC,EAAAA,EAAAA,YAAU,WACRH,EAAS,KACTI,EAAAA,EAAAA,IAAkBH,EAAOI,SACtBC,MAAK,SAAAC,GACJ,IAAKA,EAAKC,GACR,MAAM,IAAIC,MAEZ,OAAOF,EAAKG,MACb,IACAJ,MAAK,SAAAK,GACJ,GAA4B,IAAxBA,EAAKC,QAAQC,OAEf,MADAb,EAAS,4CACH,IAAIS,MAGZX,EACEa,EAAKC,QAAQE,KAAI,kBAA0B,CACzCC,OADe,EAAGA,OAElBC,QAFe,EAAWA,QAAX,IAKpB,IACAC,OAAM,SAAAlB,GAAK,OAAImB,QAAQC,IAAIpB,EAAhB,GACf,GAAE,CAACE,EAAOI,WAGT,8BACGN,GACC,wBAAKA,KAEL,+BACGF,QADH,IACGA,OADH,EACGA,EAASiB,KAAI,WAAsBM,GAAtB,IAAGL,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACZ,2BACE,0BAAI,WAASD,MACb,uBAAIC,MAFGI,EADG,OAUvB,C,uJClDD,IAAMC,EAAU,mCAEHC,EAAsB,WACjC,OAAOC,MAAM,2DAAD,OACiDF,GAE9D,EACYG,EAAmB,SAAAC,GAC9B,OAAOF,MAAM,qDAAD,OAC2CF,EAD3C,kBAC4DI,GAEzE,EACYC,EAAoB,SAAAC,GAC/B,OAAOJ,MAAM,sCAAD,OAAuCI,EAAvC,oBAAqDN,GAClE,EACYO,EAAoB,SAAAD,GAC/B,OAAOJ,MAAM,sCAAD,OAC4BI,EAD5B,4BACkDN,GAE/D,EACYjB,EAAoB,SAAAuB,GAC/B,OAAOJ,MAAM,sCAAD,OAC4BI,EAD5B,4BACkDN,GAE/D,C","sources":["pages/ReviewsPage.jsx","services/api.js"],"sourcesContent":["import { fetchMovieReviews } from 'services/api';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst ReviewsPage = () => {\n  const [reviews, setReviews] = useState(null);\n  const [error, setError] = useState('');\n  const params = useParams();\n\n  useEffect(() => {\n    setError('');\n    fetchMovieReviews(params.movieId)\n      .then(resp => {\n        if (!resp.ok) {\n          throw new Error();\n        }\n        return resp.json();\n      })\n      .then(data => {\n        if (data.results.length === 0) {\n          setError('There are no any reviews for that movie.');\n          throw new Error();\n        }\n\n        setReviews(\n          data.results.map(({ author, content }) => ({\n            author,\n            content,\n          }))\n        );\n      })\n      .catch(error => console.log(error));\n  }, [params.movieId]);\n\n  return (\n    <>\n      {error ? (\n        <h3>{error}</h3>\n      ) : (\n        <ul>\n          {reviews?.map(({ author, content }, index) => (\n            <li key={index}>\n              <h3>Author: {author}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default ReviewsPage;\n","const API_KEY = '8aba4e3419a44727b7eb66f35fce4fa2';\n\nexport const fetchTrendingMovies = () => {\n  return fetch(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n  );\n};\nexport const fetchMovieByName = value => {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${value}`\n  );\n};\nexport const fetchMovieDetails = id => {\n  return fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`);\n};\nexport const fetchMovieCredits = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}`\n  );\n};\nexport const fetchMovieReviews = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n};\n"],"names":["useState","reviews","setReviews","error","setError","params","useParams","useEffect","fetchMovieReviews","movieId","then","resp","ok","Error","json","data","results","length","map","author","content","catch","console","log","index","API_KEY","fetchTrendingMovies","fetch","fetchMovieByName","value","fetchMovieDetails","id","fetchMovieCredits"],"sourceRoot":""}